// Given a circularly sorted array of integers, find the minimum number of rotations performed on some sorted array to create this given array.

Assume there are no duplicates in the array and the rotation is in anti-clockwise direction

import java.util.Scanner;

class Result {
 static int rotationCount(int a[], int size)
  {
     int l=0, r=size-1;
       while(l<=r){
           if (a[l] <= a[r])
               return l;
           int mid = (l + r)/2;
           int prev = (mid - 1 + size) % size;
           int next = (mid + 1) % size;
           if (a[prev] > a[mid] && a[next] > a[mid])
               return mid;
           else if (a[mid] < a[r])
               r = mid-1;
           else
               l = mid+1;
       }
       return -1;
  }
}

class Main {
  public static void main(String[] args)
  {
    int T, i, size = 0;
    Result o1 = new Result();
    Scanner sc = new Scanner(System.in);
    T = Integer.parseInt(sc.nextLine().trim());
    while (T>0)
    {
      T--;
      size = sc.nextInt();
      int arr[] = new int[size];
      for( i = 0; i < size; i++) 
        arr[i] = sc.nextInt();
      System.out.println(o1.rotationCount(arr, size));
    }
  }
}
